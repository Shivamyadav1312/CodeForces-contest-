PROBLEM A CHESS FOR THREE
//                                         
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
 
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
using namespace std;
#define ll int_fast64_t
#define subham ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
#define all(a) (a).begin(), (a).end()
#define nl "\n"
#define rr return;
#define what_is(x) cerr << #x << " is " << x << endl;
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
 
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << endl;
    err(++it, args...);
}
 
 
 
void solve ()
{
        ll a,b,c;
        cin>>a>>b>>c;
         ll sum=a+b+c;
        if(sum%2==1){
            cout<<-1<<nl;
        rr;
        }
          cout<<min(sum/2,(a+b))<<nl;
 
}
 
 
signed main()
{
  subham;
 ll testCase = 1;
  cin>>testCase;
  while (testCase--)
  {
    solve();
  }
  return 0;
}
B CAT ,FOX AND LONELY ARRAY
//    
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
 
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
using namespace std;
#define ll int_fast64_t
#define subham ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
#define all(a) (a).begin(), (a).end()
#define nl "\n"
// #define rr return;
#define what_is(x) cerr << #x << " is " << x << endl;
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
 
 
using namespace std; 
 
#define int long long 
 
int st[100001][20]; 
  
void buildsparse(int arr[], int N) 
{ 
    for (int i = 0; i < N; i++) 
        st[i][0] = arr[i]; 
  
    for (int j = 1; j <= 20; j++) 
        for (int i = 0; i + (1 << j) <= N; i++) 
            st[i][j] = st[i][j - 1] | st[i + (1 << (j - 1))][j - 1]; 
} 
  
int query(int L, int R) 
{ 
     
    int sum=0; 
    for (int j = 20; j >= 0; j--) 
    { 
        if ((1 << j) <= R - L + 1) 
        { 
            sum |= st[L][j]; 
  
            L += 1 << j; 
        } 
    } 
    return sum; 
} 
 
signed main() 
{ 
    int t; 
    cin>>t; 
    while(t--) 
    { 
        int n; 
        cin>>n; 
        int arr[n]; 
        for(int i=0;i<n;i++) 
        { 
            cin>>arr[i]; 
        } 
        buildsparse(arr,n); 
        int l=1,r=n; 
        int ans=n; 
        while(l<=r) 
        { 
            int mid=l+(r-l)/2; 
            int val=0; 
            for(int i=0;i<mid;i++) 
            { 
                val |= arr[i]; 
            } 
            bool flag=true; 
            for(int i=1;i<n;i++) 
            { 
                int ll=i; 
                int rr=i+mid-1; 
                if(rr<=n-1) 
                { 
                    int currval=query(ll,rr); 
                    if(currval!=val) 
                    { 
                        flag=false; 
                        break; 
                    } 
                } 
                 
                 
            } 
            if(flag) 
            { 
                ans=min(ans,mid); 
                r=mid-1; 
            } 
            else 
            { 
                l=mid+1; 
            } 
        } 
        cout<<ans<<endl; 
    } 
}
